/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package nl.dirkgroot.structurizr.dsl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.dirkgroot.structurizr.dsl.psi.SDTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/dirgroot/stuff/structurizr-dsl-plugin/src/main/grammar/StructurizrDSL.flex</tt>
 */
public class StructurizrDSLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPECT_ARGUMENTS = 2;
  public static final int EXPECT_PROPERTIES = 4;
  public static final int EXPECT_SCRIPT_ARGUMENTS = 6;
  public static final int EXPECT_SCRIPT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\5\1\3\1\1\22\0\1\3\1\15\1\4\1\10\6\0\1\11\2\0\1\40\1\0\1\7"+
    "\12\6\3\0\1\14\1\41\2\0\2\6\1\56\1\6\1\47\1\6\1\51\1\6\1\46\2\6\1\42\1\6\1"+
    "\52\3\6\1\34\1\54\3\6\1\60\3\6\4\0\1\6\1\0\1\16\1\44\1\22\1\17\1\27\1\30\1"+
    "\37\1\35\1\26\1\6\1\45\1\33\1\31\1\24\1\23\1\32\1\6\1\20\1\21\1\25\1\36\1"+
    "\50\1\57\1\53\1\43\1\55\1\13\1\0\1\12\7\0\1\5\32\0\1\5\337\0\1\5\177\0\13"+
    "\5\35\0\2\5\5\0\1\5\57\0\1\5\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\1\17\4\1\1\3\4\3\3\1\11"+
    "\1\12\1\13\1\11\1\12\1\14\1\7\1\15\3\16"+
    "\1\17\1\20\10\0\40\4\1\21\6\4\1\13\1\11"+
    "\12\0\47\4\1\22\10\4\1\11\3\0\1\23\6\0"+
    "\21\4\1\24\5\4\1\25\30\4\1\11\1\26\1\27"+
    "\1\30\6\0\10\4\1\31\1\32\4\4\1\33\3\4"+
    "\1\34\3\4\1\35\11\4\1\36\7\4\1\37\1\40"+
    "\3\4\1\41\1\4\1\42\1\26\6\0\7\4\1\43"+
    "\1\44\4\4\1\45\1\46\20\4\1\47\2\4\1\50"+
    "\2\4\1\51\1\4\1\52\4\0\1\53\4\4\1\54"+
    "\1\55\7\4\1\56\4\4\1\57\2\4\1\60\1\61"+
    "\1\62\12\4\2\0\1\63\1\0\21\4\1\64\1\65"+
    "\1\66\1\4\1\67\3\4\1\70\1\4\1\71\2\0"+
    "\1\72\7\4\1\73\1\4\1\74\2\4\1\75\1\76"+
    "\6\4\1\77\2\0\1\100\1\4\1\101\7\4\1\102"+
    "\1\4\1\103\1\104\2\4\1\105\2\0\1\106\4\4"+
    "\1\107\4\4\1\110\2\4\1\111\1\112\1\0\11\4"+
    "\1\113\1\0\5\4\1\114\1\4\1\115\1\4\1\0"+
    "\2\4\1\116\1\117\3\4\1\0\1\4\1\120\1\4"+
    "\1\121\2\4\1\0\4\4\1\0\2\4\1\122\1\4"+
    "\1\0\2\4\1\123\1\0\2\4\1\0\2\4\1\124"+
    "\1\125\1\4\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[515];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u0157\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u0157\0\u0157"+
    "\0\u0157\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0157\0\u0682"+
    "\0\u06b3\0\u0157\0\u06e4\0\u0715\0\u06b3\0\u06b3\0\u06b3\0\u06b3"+
    "\0\u0746\0\u0777\0\u0157\0\u0157\0\u0157\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0157\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u0157\0\u1076\0\u10a7\0\u10d8"+
    "\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u01ea"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u0157\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u01ea\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f\0\u01ea\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584"+
    "\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u0157\0\u0157\0\u0157\0\u2679"+
    "\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u01ea\0\u2958"+
    "\0\u2989\0\u29ba\0\u29eb\0\u01ea\0\u2a1c\0\u2a4d\0\u2a7e\0\u01ea"+
    "\0\u2aaf\0\u2ae0\0\u2b11\0\u01ea\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5"+
    "\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u01ea\0\u2cfb\0\u2d2c"+
    "\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u01ea\0\u01ea\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u01ea\0\u2ee5\0\u01ea\0\u06b3\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf"+
    "\0\u3100\0\u3131\0\u3162\0\u3193\0\u01ea\0\u31c4\0\u31f5\0\u3226"+
    "\0\u3257\0\u01ea\0\u01ea\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c"+
    "\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4"+
    "\0\u3505\0\u3536\0\u3567\0\u01ea\0\u3598\0\u35c9\0\u01ea\0\u35fa"+
    "\0\u362b\0\u01ea\0\u365c\0\u0157\0\u368d\0\u36be\0\u36ef\0\u3720"+
    "\0\u0157\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u01ea\0\u01ea\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u01ea\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u01ea\0\u3a30\0\u3a61\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8"+
    "\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u0157\0\u3cde\0\u3d0f"+
    "\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97"+
    "\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u4050\0\u01ea\0\u4081\0\u40b2\0\u40e3"+
    "\0\u01ea\0\u4114\0\u0157\0\u4145\0\u4176\0\u01ea\0\u41a7\0\u41d8"+
    "\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u01ea"+
    "\0\u4360\0\u4391\0\u01ea\0\u01ea\0\u43c2\0\u43f3\0\u4424\0\u4455"+
    "\0\u4486\0\u44b7\0\u01ea\0\u44e8\0\u4519\0\u01ea\0\u454a\0\u457b"+
    "\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u01ea"+
    "\0\u4703\0\u01ea\0\u01ea\0\u4734\0\u4765\0\u01ea\0\u4796\0\u47c7"+
    "\0\u01ea\0\u47f8\0\u4829\0\u485a\0\u488b\0\u01ea\0\u48bc\0\u48ed"+
    "\0\u491e\0\u494f\0\u01ea\0\u4980\0\u49b1\0\u01ea\0\u0157\0\u49e2"+
    "\0\u4a13\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a"+
    "\0\u4b9b\0\u01ea\0\u4bcc\0\u4bfd\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1"+
    "\0\u01ea\0\u4cf2\0\u01ea\0\u4d23\0\u4d54\0\u4d85\0\u4db6\0\u01ea"+
    "\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u01ea\0\u4f0d"+
    "\0\u01ea\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064"+
    "\0\u5095\0\u50c6\0\u50f7\0\u01ea\0\u5128\0\u5159\0\u518a\0\u51bb"+
    "\0\u01ea\0\u51ec\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u0157"+
    "\0\u01ea\0\u5312\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[515];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\2\10\1\14\1\15\1\16"+
    "\1\10\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\14\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\2\14\1\37\1\40\1\41\1\42\1\10"+
    "\2\14\1\43\3\14\1\44\6\14\1\45\1\14\1\10"+
    "\1\46\1\47\1\50\2\10\1\14\1\15\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\14\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\14\1\37\1\40\1\41\1\42\1\10\2\14"+
    "\1\43\3\14\1\44\6\14\1\45\1\14\1\51\2\52"+
    "\1\13\1\53\1\52\1\51\1\54\1\16\2\51\1\55"+
    "\46\51\1\11\1\12\1\13\1\53\1\10\1\51\1\54"+
    "\1\16\1\51\1\56\1\57\46\51\1\46\1\47\1\50"+
    "\1\53\1\10\1\51\1\54\1\16\1\51\1\56\1\57"+
    "\46\51\2\52\1\13\1\53\1\52\1\51\1\54\1\16"+
    "\2\51\1\60\45\51\1\61\1\62\1\63\7\61\1\64"+
    "\1\65\45\61\63\0\1\12\61\0\1\13\63\0\1\14"+
    "\7\0\22\14\2\0\17\14\7\0\1\16\1\0\1\66"+
    "\47\0\1\16\2\0\56\16\16\0\1\67\1\70\1\71"+
    "\1\72\1\73\3\0\1\74\3\0\1\75\34\0\1\14"+
    "\7\0\6\14\1\76\11\14\1\77\1\14\2\0\17\14"+
    "\6\0\1\14\7\0\11\14\1\100\10\14\2\0\1\14"+
    "\1\101\15\14\6\0\1\14\7\0\5\14\1\102\14\14"+
    "\2\0\17\14\6\0\1\14\7\0\5\14\1\103\1\14"+
    "\1\104\7\14\1\105\2\14\2\0\1\14\1\106\15\14"+
    "\6\0\1\14\7\0\5\14\1\107\12\14\1\110\1\14"+
    "\2\0\17\14\6\0\1\14\7\0\14\14\1\111\5\14"+
    "\2\0\17\14\6\0\1\14\7\0\1\112\7\14\1\113"+
    "\1\114\5\14\1\115\2\14\2\0\17\14\6\0\1\14"+
    "\7\0\4\14\1\116\1\14\1\117\13\14\2\0\17\14"+
    "\6\0\1\14\7\0\6\14\1\120\6\14\1\121\4\14"+
    "\2\0\11\14\1\122\5\14\6\0\1\14\7\0\5\14"+
    "\1\123\2\14\1\124\11\14\2\0\17\14\6\0\1\14"+
    "\7\0\5\14\1\125\3\14\1\126\10\14\2\0\17\14"+
    "\6\0\1\14\7\0\2\14\1\127\2\14\1\130\3\14"+
    "\1\131\10\14\2\0\17\14\6\0\1\14\7\0\11\14"+
    "\1\132\10\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\133\1\134\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\135\17\14\2\0\17\14\41\0\1\136\25\0"+
    "\1\14\7\0\1\137\1\14\1\140\2\14\1\141\14\14"+
    "\2\0\17\14\6\0\1\14\7\0\10\14\1\142\11\14"+
    "\2\0\17\14\6\0\1\14\7\0\5\14\1\143\2\14"+
    "\1\144\11\14\2\0\17\14\2\0\1\47\57\0\1\46"+
    "\1\47\1\50\55\0\1\51\5\0\53\51\1\53\2\0"+
    "\1\53\1\145\54\53\1\51\5\0\1\51\1\16\1\51"+
    "\1\146\47\51\1\61\2\0\7\61\2\0\45\61\2\0"+
    "\1\63\56\0\11\147\1\0\47\147\17\0\1\150\64\0"+
    "\1\151\64\0\1\152\53\0\1\153\61\0\1\154\54\0"+
    "\1\155\4\0\1\156\4\0\1\157\62\0\1\160\33\0"+
    "\1\14\7\0\10\14\1\161\11\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\162\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\163\10\14\1\164\5\14\2\0"+
    "\17\14\6\0\1\14\7\0\6\14\1\165\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\20\14\1\166\1\14\2\0"+
    "\17\14\6\0\1\14\7\0\12\14\1\167\7\14\2\0"+
    "\17\14\6\0\1\14\7\0\2\14\1\170\17\14\2\0"+
    "\1\14\1\171\15\14\6\0\1\14\7\0\1\172\21\14"+
    "\2\0\17\14\6\0\1\14\7\0\3\14\1\173\16\14"+
    "\2\0\17\14\6\0\1\14\7\0\6\14\1\174\4\14"+
    "\1\175\1\14\1\176\4\14\2\0\17\14\6\0\1\14"+
    "\7\0\3\14\1\177\16\14\2\0\17\14\6\0\1\14"+
    "\7\0\1\200\21\14\2\0\17\14\6\0\1\14\7\0"+
    "\21\14\1\201\2\0\17\14\6\0\1\14\7\0\7\14"+
    "\1\202\12\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\203\1\14\1\204\15\14\2\0\17\14\6\0\1\14"+
    "\7\0\10\14\1\205\1\206\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\5\14\1\207\14\14\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\210\1\211\5\14\1\212\7\14"+
    "\2\0\17\14\6\0\1\14\7\0\7\14\1\213\12\14"+
    "\2\0\17\14\6\0\1\14\7\0\11\14\1\214\10\14"+
    "\2\0\17\14\6\0\1\14\7\0\4\14\1\215\2\14"+
    "\1\216\12\14\2\0\17\14\6\0\1\14\7\0\6\14"+
    "\1\217\13\14\2\0\17\14\6\0\1\14\7\0\15\14"+
    "\1\220\4\14\2\0\17\14\6\0\1\14\7\0\1\14"+
    "\1\221\20\14\2\0\17\14\6\0\1\14\7\0\7\14"+
    "\1\222\12\14\2\0\17\14\6\0\1\14\7\0\5\14"+
    "\1\223\14\14\2\0\17\14\6\0\1\14\7\0\3\14"+
    "\1\224\16\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\225\17\14\2\0\17\14\6\0\1\14\7\0\1\226"+
    "\7\14\1\227\11\14\2\0\17\14\6\0\1\14\7\0"+
    "\15\14\1\230\4\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\231\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\232\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\4\14\1\233\15\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\234\21\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\235\17\14\2\0\17\14\6\0\1\14\7\0\11\14"+
    "\1\236\10\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\237\17\14\2\0\17\14\6\0\1\14\7\0\1\14"+
    "\1\240\20\14\2\0\17\14\1\241\5\147\3\241\1\51"+
    "\47\241\11\147\1\242\47\147\20\0\1\243\62\0\1\244"+
    "\66\0\1\245\50\0\1\246\64\0\1\247\63\0\1\250"+
    "\53\0\1\251\70\0\1\252\64\0\1\253\30\0\1\14"+
    "\7\0\13\14\1\254\6\14\2\0\17\14\6\0\1\14"+
    "\7\0\5\14\1\255\14\14\2\0\17\14\6\0\1\14"+
    "\7\0\4\14\1\256\15\14\2\0\17\14\6\0\1\14"+
    "\7\0\15\14\1\257\4\14\2\0\17\14\6\0\1\14"+
    "\7\0\1\260\21\14\2\0\17\14\6\0\1\14\7\0"+
    "\7\14\1\261\12\14\2\0\17\14\6\0\1\14\7\0"+
    "\7\14\1\262\12\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\263\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\15\14\1\264\4\14\2\0\17\14\6\0\1\14\7\0"+
    "\14\14\1\265\5\14\2\0\17\14\6\0\1\14\7\0"+
    "\7\14\1\266\12\14\2\0\17\14\6\0\1\14\7\0"+
    "\7\14\1\267\2\14\1\270\7\14\2\0\17\14\6\0"+
    "\1\14\7\0\14\14\1\271\5\14\2\0\17\14\6\0"+
    "\1\14\7\0\5\14\1\272\14\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\273\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\4\14\1\274\15\14\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\275\16\14\2\0\17\14\6\0"+
    "\1\14\7\0\15\14\1\276\4\14\2\0\17\14\6\0"+
    "\1\14\7\0\13\14\1\277\6\14\2\0\17\14\6\0"+
    "\1\14\7\0\17\14\1\300\2\14\2\0\17\14\6\0"+
    "\1\14\7\0\4\14\1\301\15\14\2\0\17\14\6\0"+
    "\1\14\7\0\13\14\1\302\6\14\2\0\17\14\6\0"+
    "\1\14\7\0\6\14\1\303\13\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\304\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\15\14\1\305\4\14\2\0\17\14\6\0"+
    "\1\14\7\0\2\14\1\306\17\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\307\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\13\14\1\310\6\14\2\0\17\14\6\0"+
    "\1\14\7\0\15\14\1\311\4\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\312\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\313\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\314\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\315\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\1\316\21\14\2\0\17\14\6\0\1\14"+
    "\7\0\14\14\1\317\5\14\2\0\17\14\6\0\1\14"+
    "\7\0\10\14\1\320\11\14\2\0\17\14\6\0\1\14"+
    "\7\0\3\14\1\321\16\14\2\0\17\14\6\0\1\14"+
    "\7\0\15\14\1\322\4\14\2\0\17\14\6\0\1\14"+
    "\7\0\21\14\1\323\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\324\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\20\14\1\325\1\14\2\0\17\14\6\0\1\14\7\0"+
    "\22\14\2\0\3\14\1\326\13\14\6\0\1\14\7\0"+
    "\6\14\1\327\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\330\20\14\2\0\17\14\6\0\1\14\7\0"+
    "\22\14\2\0\15\14\1\331\1\14\6\0\1\14\7\0"+
    "\22\14\2\0\3\14\1\332\13\14\6\0\1\14\7\0"+
    "\7\14\1\333\12\14\2\0\17\14\1\241\5\147\3\241"+
    "\1\334\47\241\7\147\1\335\1\147\1\242\47\147\21\0"+
    "\1\336\60\0\1\337\65\0\1\340\53\0\1\341\63\0"+
    "\1\342\67\0\1\343\60\0\1\344\64\0\1\345\27\0"+
    "\1\14\7\0\1\346\21\14\2\0\17\14\6\0\1\14"+
    "\7\0\22\14\2\0\1\347\16\14\6\0\1\14\7\0"+
    "\2\14\1\350\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\351\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\13\14\1\352\6\14\2\0\17\14\6\0\1\14\7\0"+
    "\10\14\1\353\11\14\2\0\17\14\6\0\1\14\7\0"+
    "\22\14\2\0\15\14\1\354\1\14\6\0\1\14\7\0"+
    "\22\14\2\0\3\14\1\355\13\14\6\0\1\14\7\0"+
    "\11\14\1\356\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\357\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\360\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\361\21\14\2\0\17\14\6\0\1\14\7\0\10\14"+
    "\1\362\11\14\2\0\17\14\6\0\1\14\7\0\5\14"+
    "\1\363\14\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\364\15\14\1\365\1\14\2\0\17\14\6\0\1\14"+
    "\7\0\5\14\1\366\14\14\2\0\17\14\6\0\1\14"+
    "\7\0\10\14\1\367\11\14\2\0\17\14\6\0\1\14"+
    "\7\0\11\14\1\370\10\14\2\0\17\14\6\0\1\14"+
    "\7\0\10\14\1\371\11\14\2\0\17\14\6\0\1\14"+
    "\7\0\6\14\1\372\13\14\2\0\17\14\6\0\1\14"+
    "\7\0\22\14\2\0\3\14\1\373\13\14\6\0\1\14"+
    "\7\0\11\14\1\374\10\14\2\0\17\14\6\0\1\14"+
    "\7\0\1\375\21\14\2\0\17\14\6\0\1\14\7\0"+
    "\20\14\1\376\1\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\377\21\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\u0100\17\14\2\0\17\14\6\0\1\14\7\0\11\14"+
    "\1\u0101\10\14\2\0\17\14\6\0\1\14\7\0\20\14"+
    "\1\u0102\1\14\2\0\17\14\6\0\1\14\7\0\6\14"+
    "\1\u0103\13\14\2\0\17\14\6\0\1\14\7\0\22\14"+
    "\2\0\12\14\1\u0104\4\14\6\0\1\14\7\0\11\14"+
    "\1\u0105\10\14\2\0\17\14\6\0\1\14\7\0\15\14"+
    "\1\u0106\4\14\2\0\17\14\6\0\1\14\7\0\1\14"+
    "\1\u0107\20\14\2\0\17\14\6\0\1\14\7\0\11\14"+
    "\1\u0108\10\14\2\0\17\14\6\0\1\14\7\0\7\14"+
    "\1\u0109\12\14\2\0\17\14\6\0\1\14\7\0\5\14"+
    "\1\u010a\6\14\1\u010b\5\14\2\0\17\14\6\0\1\14"+
    "\7\0\7\14\1\u010c\12\14\2\0\17\14\6\0\1\14"+
    "\7\0\17\14\1\u010d\2\14\2\0\17\14\6\0\1\14"+
    "\7\0\3\14\1\u010e\16\14\2\0\17\14\6\0\1\14"+
    "\7\0\14\14\1\u010f\5\14\2\0\17\14\6\0\1\14"+
    "\7\0\21\14\1\u0110\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\u0111\20\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\u0112\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\3\14\1\u0113\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\3\14\1\u0114\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\17\14\1\u0115\2\14\2\0\17\14\1\241\5\147\1\241"+
    "\1\u0116\1\241\1\334\47\241\32\0\1\u0117\53\0\1\u0118"+
    "\60\0\1\u0119\71\0\1\u011a\50\0\1\u011b\60\0\1\u011c"+
    "\40\0\1\14\7\0\7\14\1\u011d\12\14\2\0\17\14"+
    "\6\0\1\14\7\0\1\u011e\21\14\2\0\17\14\6\0"+
    "\1\14\7\0\10\14\1\u011f\11\14\2\0\17\14\6\0"+
    "\1\14\7\0\22\14\2\0\1\14\1\u0120\15\14\6\0"+
    "\1\14\7\0\10\14\1\u0121\11\14\2\0\17\14\6\0"+
    "\1\14\7\0\6\14\1\u0122\13\14\2\0\17\14\6\0"+
    "\1\14\7\0\1\u0123\21\14\2\0\17\14\6\0\1\14"+
    "\7\0\11\14\1\u0124\10\14\2\0\17\14\6\0\1\14"+
    "\7\0\3\14\1\u0125\16\14\2\0\17\14\6\0\1\14"+
    "\7\0\13\14\1\u0126\6\14\2\0\17\14\6\0\1\14"+
    "\7\0\10\14\1\u0127\11\14\2\0\17\14\6\0\1\14"+
    "\7\0\21\14\1\u0128\2\0\17\14\6\0\1\14\7\0"+
    "\6\14\1\u0129\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\u012a\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\13\14\1\u012b\6\14\2\0\17\14\6\0\1\14\7\0"+
    "\7\14\1\u012c\12\14\2\0\17\14\6\0\1\14\7\0"+
    "\6\14\1\u012d\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\u012e\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\6\14\1\u012f\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\6\14\1\u0130\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\u0131\20\14\2\0\17\14\6\0\1\14\7\0"+
    "\3\14\1\u0132\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\14\14\1\u0133\5\14\2\0\17\14\6\0\1\14\7\0"+
    "\6\14\1\u0134\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\u0135\20\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\u0136\20\14\2\0\17\14\6\0\1\14\7\0"+
    "\10\14\1\u0137\11\14\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\u0138\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\u0139\21\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\u013a\17\14\2\0\17\14\6\0\1\14\7\0\10\14"+
    "\1\u013b\11\14\2\0\17\14\6\0\1\14\7\0\6\14"+
    "\1\u013c\13\14\2\0\17\14\6\0\1\14\7\0\11\14"+
    "\1\u013d\10\14\2\0\17\14\6\0\1\14\7\0\17\14"+
    "\1\u013e\2\14\2\0\17\14\6\0\1\14\7\0\7\14"+
    "\1\u013f\12\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\u0140\17\14\2\0\17\14\6\0\1\14\7\0\10\14"+
    "\1\u0141\11\14\2\0\17\14\6\0\1\14\7\0\2\14"+
    "\1\u0142\17\14\2\0\17\14\6\0\1\14\7\0\14\14"+
    "\1\u0143\5\14\2\0\17\14\25\0\1\u0144\51\0\1\u0145"+
    "\70\0\1\u0146\51\0\1\u0147\70\0\1\u0148\55\0\1\u0149"+
    "\42\0\1\14\7\0\10\14\1\u014a\11\14\2\0\17\14"+
    "\6\0\1\14\7\0\22\14\2\0\1\14\1\u014b\15\14"+
    "\6\0\1\14\7\0\14\14\1\u014c\5\14\2\0\17\14"+
    "\6\0\1\14\7\0\13\14\1\u014d\6\14\2\0\17\14"+
    "\6\0\1\14\7\0\4\14\1\u014e\15\14\2\0\17\14"+
    "\6\0\1\14\7\0\21\14\1\u014f\2\0\17\14\6\0"+
    "\1\14\7\0\2\14\1\u0150\17\14\2\0\17\14\6\0"+
    "\1\14\7\0\22\14\2\0\16\14\1\u0151\6\0\1\14"+
    "\7\0\22\14\2\0\1\u0152\13\14\1\u0153\2\14\6\0"+
    "\1\14\7\0\6\14\1\u0154\13\14\2\0\17\14\6\0"+
    "\1\14\7\0\20\14\1\u0155\1\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u0156\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\22\14\2\0\1\14\1\u0157\15\14\6\0"+
    "\1\14\7\0\5\14\1\u0158\14\14\2\0\17\14\6\0"+
    "\1\14\7\0\15\14\1\u0159\4\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u015a\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\4\14\1\u015b\15\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u015c\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\u015d\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\2\14\1\u015e\17\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\u015f\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u0160\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\u0161\16\14\2\0\17\14\6\0"+
    "\1\14\7\0\22\14\2\0\13\14\1\u0162\3\14\6\0"+
    "\1\14\7\0\11\14\1\u0163\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\u0164\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\u0165\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\5\14\1\u0166\14\14\2\0\17\14\6\0"+
    "\1\14\7\0\4\14\1\u0167\15\14\2\0\17\14\6\0"+
    "\1\14\7\0\22\14\2\0\14\14\1\u0168\2\14\6\0"+
    "\1\14\7\0\5\14\1\u0169\14\14\2\0\17\14\6\0"+
    "\1\14\7\0\6\14\1\u016a\13\14\2\0\17\14\6\0"+
    "\1\14\7\0\1\u016b\21\14\2\0\17\14\24\0\1\u016c"+
    "\64\0\1\u016d\57\0\1\u016e\50\0\1\u016f\47\0\1\14"+
    "\7\0\5\14\1\u0170\14\14\2\0\17\14\6\0\1\14"+
    "\7\0\5\14\1\u0171\14\14\2\0\17\14\6\0\1\14"+
    "\7\0\7\14\1\u0172\12\14\2\0\17\14\6\0\1\14"+
    "\7\0\11\14\1\u0173\10\14\2\0\17\14\6\0\1\14"+
    "\7\0\11\14\1\u0174\10\14\2\0\17\14\6\0\1\14"+
    "\7\0\10\14\1\u0175\11\14\2\0\17\14\6\0\1\14"+
    "\7\0\1\u0176\21\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\u0177\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\u0178\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\u0179\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\6\14\1\u017a\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\15\14\1\u017b\4\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\u017c\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\3\14\1\u017d\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\u017e\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\u017f\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\10\14\1\u0180\11\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\u0181\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\u0182\20\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\u0183\21\14\2\0\17\14\6\0\1\14\7\0\10\14"+
    "\1\u0184\11\14\2\0\17\14\6\0\1\14\7\0\6\14"+
    "\1\u0185\13\14\2\0\17\14\6\0\1\14\7\0\7\14"+
    "\1\u0186\12\14\2\0\17\14\6\0\1\14\7\0\17\14"+
    "\1\u0187\2\14\2\0\17\14\6\0\1\14\7\0\20\14"+
    "\1\u0188\1\14\2\0\17\14\6\0\1\14\7\0\21\14"+
    "\1\u0189\2\0\17\14\6\0\1\14\7\0\4\14\1\u018a"+
    "\15\14\2\0\17\14\25\0\1\u018b\61\0\1\u018c\66\0"+
    "\1\u018d\32\0\1\14\7\0\6\14\1\u018e\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\20\14\1\u018f\1\14\2\0"+
    "\17\14\6\0\1\14\7\0\10\14\1\u0190\11\14\2\0"+
    "\17\14\6\0\1\14\7\0\6\14\1\u0191\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\22\14\2\0\12\14\1\u0192"+
    "\4\14\6\0\1\14\7\0\1\14\1\u0193\20\14\2\0"+
    "\17\14\6\0\1\14\7\0\6\14\1\u0194\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\6\14\1\u0195\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\2\14\1\u0196\17\14\2\0"+
    "\17\14\6\0\1\14\7\0\1\u0197\21\14\2\0\17\14"+
    "\6\0\1\14\7\0\7\14\1\u0198\12\14\2\0\17\14"+
    "\6\0\1\14\7\0\5\14\1\u0199\14\14\2\0\17\14"+
    "\6\0\1\14\7\0\21\14\1\u019a\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\u019b\16\14\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\u019c\16\14\2\0\17\14\6\0"+
    "\1\14\7\0\20\14\1\u019d\1\14\2\0\17\14\6\0"+
    "\1\14\7\0\3\14\1\u019e\16\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u019f\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\10\14\1\u01a0\11\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u01a1\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\6\14\1\u01a2\13\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u01a3\10\14\2\0\17\14\27\0"+
    "\1\u01a4\60\0\1\u01a5\37\0\1\14\7\0\7\14\1\u01a6"+
    "\12\14\2\0\17\14\6\0\1\14\7\0\5\14\1\u01a7"+
    "\14\14\2\0\17\14\6\0\1\14\7\0\7\14\1\u01a8"+
    "\12\14\2\0\17\14\6\0\1\14\7\0\22\14\2\0"+
    "\1\14\1\u01a9\15\14\6\0\1\14\7\0\7\14\1\u01aa"+
    "\12\14\2\0\17\14\6\0\1\14\7\0\1\14\1\u01ab"+
    "\20\14\2\0\17\14\6\0\1\14\7\0\7\14\1\u01ac"+
    "\12\14\2\0\17\14\6\0\1\14\7\0\22\14\2\0"+
    "\4\14\1\u01ad\12\14\6\0\1\14\7\0\7\14\1\u01ae"+
    "\12\14\2\0\17\14\6\0\1\14\7\0\21\14\1\u01af"+
    "\2\0\17\14\6\0\1\14\7\0\22\14\2\0\1\14"+
    "\1\u01b0\15\14\6\0\1\14\7\0\4\14\1\u01b1\15\14"+
    "\2\0\17\14\6\0\1\14\7\0\11\14\1\u01b2\10\14"+
    "\2\0\17\14\6\0\1\14\7\0\3\14\1\u01b3\16\14"+
    "\2\0\17\14\6\0\1\14\7\0\22\14\2\0\6\14"+
    "\1\u01b4\10\14\6\0\1\14\7\0\4\14\1\u01b5\15\14"+
    "\2\0\17\14\6\0\1\14\7\0\1\14\1\u01b6\20\14"+
    "\2\0\17\14\20\0\1\u01b7\73\0\1\u01b8\33\0\1\14"+
    "\7\0\6\14\1\u01b9\13\14\2\0\17\14\6\0\1\14"+
    "\7\0\22\14\2\0\5\14\1\u01ba\1\14\1\u01bb\1\u01bc"+
    "\6\14\6\0\1\14\7\0\3\14\1\u01bd\16\14\2\0"+
    "\17\14\6\0\1\14\7\0\17\14\1\u01be\2\14\2\0"+
    "\17\14\6\0\1\14\7\0\3\14\1\u01bf\16\14\2\0"+
    "\17\14\6\0\1\14\7\0\11\14\1\u01c0\10\14\2\0"+
    "\17\14\6\0\1\14\7\0\6\14\1\u01c1\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\10\14\1\u01c2\11\14\2\0"+
    "\17\14\6\0\1\14\7\0\22\14\2\0\1\14\1\u01c3"+
    "\15\14\6\0\1\14\7\0\7\14\1\u01c4\12\14\2\0"+
    "\17\14\6\0\1\14\7\0\11\14\1\u01c5\10\14\2\0"+
    "\17\14\6\0\1\14\7\0\22\14\2\0\3\14\1\u01c6"+
    "\13\14\21\0\1\u01c7\55\0\1\u01c8\50\0\1\14\7\0"+
    "\6\14\1\u01c9\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\2\14\1\u01ca\17\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\u01cb\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\7\14\1\u01cc\12\14\2\0\17\14\6\0\1\14\7\0"+
    "\4\14\1\u01cd\15\14\2\0\17\14\6\0\1\14\7\0"+
    "\22\14\2\0\11\14\1\u01ce\5\14\6\0\1\14\7\0"+
    "\3\14\1\u01cf\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\5\14\1\u01d0\14\14\2\0\17\14\6\0\1\14\7\0"+
    "\20\14\1\u01d1\1\14\2\0\17\14\6\0\1\14\7\0"+
    "\3\14\1\u01d2\16\14\2\0\17\14\25\0\1\u01d3\41\0"+
    "\1\14\7\0\22\14\2\0\6\14\1\u01d4\10\14\6\0"+
    "\1\14\7\0\5\14\1\u01d5\14\14\2\0\17\14\6\0"+
    "\1\14\7\0\1\14\1\u01d6\20\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u01d7\10\14\2\0\17\14\6\0"+
    "\1\14\7\0\1\u01d8\21\14\2\0\17\14\6\0\1\14"+
    "\7\0\7\14\1\u01d9\12\14\2\0\17\14\6\0\1\14"+
    "\7\0\7\14\1\u01da\12\14\2\0\17\14\6\0\1\14"+
    "\7\0\6\14\1\u01db\13\14\2\0\17\14\6\0\1\14"+
    "\7\0\2\14\1\u01dc\17\14\2\0\17\14\26\0\1\u01dd"+
    "\40\0\1\14\7\0\10\14\1\u01de\11\14\2\0\17\14"+
    "\6\0\1\14\7\0\20\14\1\u01df\1\14\2\0\17\14"+
    "\6\0\1\14\7\0\11\14\1\u01e0\10\14\2\0\17\14"+
    "\6\0\1\14\7\0\13\14\1\u01e1\6\14\2\0\17\14"+
    "\6\0\1\14\7\0\14\14\1\u01e2\5\14\2\0\17\14"+
    "\6\0\1\14\7\0\1\u01e3\21\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u01e4\10\14\2\0\17\14\23\0"+
    "\1\u01e5\43\0\1\14\7\0\2\14\1\u01e6\17\14\2\0"+
    "\17\14\6\0\1\14\7\0\14\14\1\u01e7\5\14\2\0"+
    "\17\14\6\0\1\14\7\0\22\14\2\0\4\14\1\u01e8"+
    "\12\14\6\0\1\14\7\0\11\14\1\u01e9\10\14\2\0"+
    "\17\14\6\0\1\14\7\0\6\14\1\u01ea\13\14\2\0"+
    "\17\14\6\0\1\14\7\0\22\14\2\0\10\14\1\u01eb"+
    "\6\14\24\0\1\u01ec\42\0\1\14\7\0\5\14\1\u01ed"+
    "\14\14\2\0\17\14\6\0\1\14\7\0\6\14\1\u01ee"+
    "\13\14\2\0\17\14\6\0\1\14\7\0\4\14\1\u01ef"+
    "\15\14\2\0\17\14\6\0\1\14\7\0\5\14\1\u01f0"+
    "\14\14\2\0\17\14\21\0\1\u01f1\45\0\1\14\7\0"+
    "\6\14\1\u01f2\13\14\2\0\17\14\6\0\1\14\7\0"+
    "\3\14\1\u01f3\16\14\2\0\17\14\6\0\1\14\7\0"+
    "\11\14\1\u01f4\10\14\2\0\17\14\6\0\1\14\7\0"+
    "\1\14\1\u01f5\20\14\2\0\17\14\35\0\1\u01f6\31\0"+
    "\1\14\7\0\13\14\1\u01f7\6\14\2\0\17\14\6\0"+
    "\1\14\7\0\7\14\1\u01f8\12\14\2\0\17\14\6\0"+
    "\1\14\7\0\11\14\1\u01f9\10\14\2\0\17\14\26\0"+
    "\1\u01fa\40\0\1\14\7\0\11\14\1\u01fb\10\14\2\0"+
    "\17\14\6\0\1\14\7\0\1\u01fc\21\14\2\0\17\14"+
    "\32\0\1\u01fd\34\0\1\14\7\0\6\14\1\u01fe\13\14"+
    "\2\0\17\14\6\0\1\14\7\0\6\14\1\u01ff\13\14"+
    "\2\0\17\14\21\0\1\u0200\45\0\1\14\7\0\7\14"+
    "\1\u0201\12\14\2\0\17\14\6\0\1\14\7\0\4\14"+
    "\1\u0202\15\14\2\0\17\14\6\0\1\14\7\0\11\14"+
    "\1\u0203\10\14\2\0\17\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21315];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\4\1\3\11\25\1\1\11"+
    "\2\1\1\11\10\1\3\11\10\0\40\1\1\11\6\1"+
    "\1\11\1\1\12\0\61\1\3\0\1\11\6\0\61\1"+
    "\3\11\6\0\61\1\6\0\47\1\1\11\4\0\1\11"+
    "\42\1\2\0\1\11\1\0\33\1\1\11\2\0\26\1"+
    "\2\0\21\1\2\0\16\1\1\11\1\0\12\1\1\0"+
    "\11\1\1\0\7\1\1\0\6\1\1\0\4\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\2\1\1\11"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[515];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public StructurizrDSLLexer() {
        this(null);
    }

    private void startScript() {
        braces = 0;
        yybegin(EXPECT_SCRIPT);
    }

    private void endScript() {
        braces = 0;
        yybegin(YYINITIAL);
    }
    private int braces = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StructurizrDSLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':  // fall though
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 87: break;
          case 2: 
            { return CRLF;
            } 
            // fall through
          case 88: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 90: break;
          case 5: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 91: break;
          case 6: 
            { return BRACE2;
            } 
            // fall through
          case 92: break;
          case 7: 
            { return BRACE1;
            } 
            // fall through
          case 93: break;
          case 8: 
            { return EQUALS;
            } 
            // fall through
          case 94: break;
          case 9: 
            { return UNQUOTED_TEXT;
            } 
            // fall through
          case 95: break;
          case 10: 
            { yybegin(YYINITIAL); yypushback(yytext().length());
            } 
            // fall through
          case 96: break;
          case 11: 
            { return QUOTED_TEXT;
            } 
            // fall through
          case 97: break;
          case 12: 
            { yybegin(YYINITIAL); return BRACE2;
            } 
            // fall through
          case 98: break;
          case 13: 
            { startScript(); return BRACE1;
            } 
            // fall through
          case 99: break;
          case 14: 
            { return SCRIPT_TEXT;
            } 
            // fall through
          case 100: break;
          case 15: 
            { if (braces == 0) {
                         endScript();
                         return BRACE2;
                     }
                     braces--;
                     return SCRIPT_TEXT;
            } 
            // fall through
          case 101: break;
          case 16: 
            { braces++; return SCRIPT_TEXT;
            } 
            // fall through
          case 102: break;
          case 17: 
            { yybegin(EXPECT_ARGUMENTS); return RELATIONSHIP_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 18: 
            { yybegin(EXPECT_ARGUMENTS); return URL_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 19: 
            { yybegin(EXPECT_ARGUMENTS); return REF_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 20: 
            { yybegin(EXPECT_ARGUMENTS); return TAGS_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 21: 
            { yybegin(EXPECT_ARGUMENTS); return ICON_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 22: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 108: break;
          case 23: 
            { yybegin(EXPECT_ARGUMENTS); return ADRS_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 24: 
            { yybegin(EXPECT_ARGUMENTS); return DOCS_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 25: 
            { yybegin(EXPECT_ARGUMENTS); return STYLE_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 26: 
            { yybegin(EXPECT_ARGUMENTS); return SHAPE_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 27: 
            { yybegin(EXPECT_ARGUMENTS); return COLOR_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 28: 
            { yybegin(EXPECT_ARGUMENTS); return TITLE_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 29: 
            { yybegin(EXPECT_ARGUMENTS); return THEME_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 30: 
            { yybegin(EXPECT_ARGUMENTS); return MODEL_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 31: 
            { yybegin(EXPECT_PROPERTIES); return USERS_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 32: 
            { yybegin(EXPECT_ARGUMENTS); return GROUP_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 33: 
            { yybegin(EXPECT_ARGUMENTS); return VIEWS_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 34: 
            { yybegin(EXPECT_ARGUMENTS); return WIDTH_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 35: 
            { yybegin(EXPECT_ARGUMENTS); return STROKE_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 36: 
            { yybegin(EXPECT_ARGUMENTS); return STYLES_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 37: 
            { yybegin(EXPECT_ARGUMENTS); return COLOUR_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 38: 
            { yybegin(EXPECT_ARGUMENTS); return CUSTOM_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 39: 
            { yybegin(EXPECT_ARGUMENTS); return PERSON_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 40: 
            { yybegin(EXPECT_ARGUMENTS); return HEIGHT_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 41: 
            { yybegin(EXPECT_ARGUMENTS); return BORDER_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 42: 
            { yybegin(EXPECT_SCRIPT_ARGUMENTS); return SCRIPT_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 43: 
            { yybegin(EXPECT_ARGUMENTS); return PLUGIN_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 44: 
            { yybegin(EXPECT_ARGUMENTS); return DYNAMIC_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 45: 
            { yybegin(EXPECT_ARGUMENTS); return ROUTING_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 46: 
            { yybegin(EXPECT_ARGUMENTS); return OPACITY_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 47: 
            { yybegin(EXPECT_ARGUMENTS); return INCLUDE_ELEMENT_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 48: 
            { yybegin(EXPECT_ARGUMENTS); return ELEMENT_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 49: 
            { yybegin(EXPECT_ARGUMENTS); return EXCLUDE_ELEMENT_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 50: 
            { yybegin(EXPECT_ARGUMENTS); return EXTENDS_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 51: 
            { yybegin(EXPECT_ARGUMENTS); return INCLUDE_FILE_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 52: 
            { yybegin(EXPECT_ARGUMENTS); return FONTSIZE_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 53: 
            { yybegin(EXPECT_ARGUMENTS); return FILTERED_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 54: 
            { yybegin(EXPECT_ARGUMENTS); return METADATA_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 55: 
            { yybegin(EXPECT_ARGUMENTS); return POSITION_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 56: 
            { yybegin(EXPECT_PROPERTIES); return BRANDING_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 57: 
            { yybegin(EXPECT_ARGUMENTS); return CONSTANT_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 58: 
            { yybegin(EXPECT_ARGUMENTS); return ANIMATION_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 59: 
            { yybegin(EXPECT_ARGUMENTS); return CONTAINER_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 60: 
            { yybegin(EXPECT_ARGUMENTS); return COMPONENT_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 61: 
            { yybegin(EXPECT_ARGUMENTS); return THICKNESS_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 62: 
            { yybegin(EXPECT_ARGUMENTS); return INSTANCES_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 63: 
            { yybegin(EXPECT_ARGUMENTS); return WORKSPACE_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 64: 
            { yybegin(EXPECT_ARGUMENTS); return AUTO_LAYOUT_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 65: 
            { yybegin(EXPECT_ARGUMENTS); return DEPLOYMENT_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 66: 
            { yybegin(EXPECT_ARGUMENTS); return TECHNOLOGY_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 67: 
            { yybegin(EXPECT_ARGUMENTS); return ENTERPRISE_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 68: 
            { yybegin(EXPECT_PROPERTIES); return PROPERTIES_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 69: 
            { yybegin(EXPECT_ARGUMENTS); return BACKGROUND_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 70: 
            { yybegin(EXPECT_ARGUMENTS); return DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 71: 
            { yybegin(EXPECT_ARGUMENTS); return STROKEWIDTH_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 72: 
            { yybegin(EXPECT_PROPERTIES); return TERMINOLOGY_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 73: 
            { yybegin(EXPECT_ARGUMENTS); return HEALTH_CHECK_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 74: 
            { yybegin(EXPECT_ARGUMENTS); return IDENTIFIERS_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 75: 
            { yybegin(EXPECT_ARGUMENTS); return PERSPECTIVES_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 76: 
            { yybegin(EXPECT_ARGUMENTS); return SYSTEM_CONTEXT_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 77: 
            { yybegin(EXPECT_PROPERTIES); return CONFIGURATION_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 78: 
            { yybegin(EXPECT_ARGUMENTS); return DEPLOYMENT_NODE_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 79: 
            { yybegin(EXPECT_ARGUMENTS); return SOFTWARE_SYSTEM_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 80: 
            { yybegin(EXPECT_ARGUMENTS); return DEPLOYMENT_GROUP_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 81: 
            { yybegin(EXPECT_ARGUMENTS); return SYSTEM_LANDSCAPE_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 82: 
            { yybegin(EXPECT_ARGUMENTS); return CONTAINER_INSTANCE;
            } 
            // fall through
          case 168: break;
          case 83: 
            { yybegin(EXPECT_ARGUMENTS); return INFRASTRUCTURE_NODE_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 84: 
            { yybegin(EXPECT_ARGUMENTS); return IMPLIED_RELATIONSHIPS_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 85: 
            { yybegin(EXPECT_ARGUMENTS); return DEPLOYMENT_ENVIRONMENT_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 86: 
            { yybegin(EXPECT_ARGUMENTS); return SOFTWARE_SYSTEM_INSTANCE_KEYWORD;
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
