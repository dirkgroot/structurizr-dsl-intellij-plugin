{
    parserClass="nl.dirkgroot.structurizr.dsl.StructurizrDSLParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="SD"
    psiImplClassSuffix="Impl"
    psiPackage="nl.dirkgroot.structurizr.dsl.psi"
    psiImplPackage="nl.dirkgroot.structurizr.dsl.psi.impl"
    psiImplUtilClass="nl.dirkgroot.structurizr.dsl.psi.impl.SDPsiImplUtil"

    elementTypeHolderClass="nl.dirkgroot.structurizr.dsl.psi.SDTypes"
    elementTypeClass="nl.dirkgroot.structurizr.dsl.psi.SDElement"
    tokenTypeClass="nl.dirkgroot.structurizr.dsl.psi.SDToken"

    tokens=[
        line_comment='regexp://[^\r\n]*(\r|\n|\r\n)?'
        block_comment='regexp:/\*(.|\n)*\*/'

        crlf='crlf'
        brace1='{'
        brace2='}'
        equals='='

        quoted_text='regexp:"[^"\r\n]*"'
        unquoted_text='regexp:[^\s"\r\n]+'
    ]
}

structurizrDSLFile ::= expr*

private expr ::=
            scriptDefinition
            | explicitRelationship
            | implicitRelationship
            | animationBlock
            | propertiesDefinition
            | identifierAssignment
            | blockStatement
            | singleLineStatement
            | lineCommentStatement
            | blockCommentStatement

fake statement ::= expr

explicitRelationship ::= relationshipSource relationshipKeyword relationshipDestination argument* block? lf_eof { extends=statement }
implicitRelationship ::= relationshipKeyword relationshipDestination argument* block? lf_eof { extends=statement }
relationshipSource ::= UNQUOTED_TEXT
relationshipKeyword ::= ARROW
relationshipDestination ::= UNQUOTED_TEXT

animationBlock ::= animationKeyword '{' CRLF (identifierReferences | lineCommentStatement | blockCommentStatement)* '}' lf_eof { extends=statement }
animationKeyword ::= 'animation'
identifierReferences ::= identifierReference* CRLF { extends=statement }

lineCommentStatement ::= LINE_COMMENT lf_eof { extends=statement }
blockCommentStatement ::= BLOCK_COMMENT lf_eof { extends=statement }

scriptDefinition ::= scriptKeyword argument* scriptBlock lf_eof { extends=statement }
scriptKeyword ::= '!script'
scriptBlock ::= '{' SCRIPT_TEXT '}'

propertiesDefinition ::= propertiesKeyword propertiesBlock lf_eof { extends=statement }
propertiesKeyword ::= 'properties' | 'users'
propertiesBlock ::= '{' CRLF propertyDefinition* '}'
propertyDefinition ::= propertyKey propertyValue CRLF
propertyKey ::= text
propertyValue ::= text

identifierAssignment ::= identifierReference '=' (blockStatement | singleLineStatement) { extends=statement }
identifierReference ::= UNQUOTED_TEXT

blockStatement ::= keyword argument* block lf_eof { extends=statement }
block ::= '{' CRLF expr* '}' {
    pin=1
    recoverWhile=blockRecover
}
private blockRecover ::= !(text | lf_eof)

singleLineStatement ::= keyword argument* lf_eof { extends=statement }

keyword ::= UNQUOTED_TEXT
argument ::= text

private text ::= QUOTED_TEXT | UNQUOTED_TEXT
private lf_eof ::= CRLF | <<eof>>
